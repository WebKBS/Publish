@{
    ViewData["title"] = "Enter Token Info";
}

<div class="top_title_wrap">
    <div class="inner">
        <h2 class="subtitle_1 suit_m">TOKEN ISSUANCE</h2>
        <p class="sub_title body_2 suit_r color_white_2">AIR DROPPER is optimized for ‘Chrome’ web browser and does not support mobile service.</p>
    </div>
</div>

<section class="cont issuing">
    <div class="inner">
        <h2 class="subtitle_3 suit_m">Enter Token Info</h2>
        <div class="select_box">
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Blockchain Network</h3>
                <div class="select_list">
                    <!-- on 추가시 style 변경 -->
                    <div class="select_wrap default">
                        <button type="button" id="selectChain">
                            <img src="" />
                            <span class="select">Select blockchain network</span>
                        </button>
                    </div>
                    <!-- on 추가시 display -->
                    <ul class="chain_list">
                        <li>
                            <button type="button">
                                <img src="~/images/coin_icon/ethereum.svg" alt="ethereum" />
                                <span class="select">Ethereum</span>
                            </button>
                        </li>
                        <li>
                            <button type="button">
                                <img src="~/images/coin_icon/polygon.svg" alt="polygon" />
                                <span class="select">Polygon</span>
                            </button>
                        </li>
                        <li>
                            <button type="button">
                                <img src="~/images/coin_icon/bsc.svg" alt="bsc" />
                                <span class="select">Bsc</span>
                            </button>
                        </li>
                        <li>
                            <button type="button">
                                <img src="~/images/coin_icon/klaytn.svg" alt="klaytn" />
                                <span class="select">Klaytn</span>
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Select Network" />
                    Select Network
                </div>
            </div>
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Token Format</h3>
                <div class="select_list">
                    <!-- default 클래스 삭제시 흰색 색상 -->
                    <div class="select_wrap default">
                        <button type="button" id="selectToken">
                            <span class="select">Select token format</span>
                        </button>
                    </div>
                    <ul class="token_list">
                        <li>
                            <button type="button">
                                <span class="select">ERC-20</span>
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Select the token format" />
                    Select the token format
                </div>
            </div>
        </div>
        <div class="input_box">
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Token Name</h3>
                <input type="text" placeholder="Recommend less than 6 alphabets" />
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Enter the token name" />
                    Enter the token name
                </div>
            </div>
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Token Ticker</h3>
                <input type="text" placeholder="Recommend less than 6 alphabets" />
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Enter the token ticker" />
                    Enter the token ticker
                </div>
            </div>
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Decimal</h3>
                <input type="tel" placeholder="1~99" />
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Format dismatch" />
                    Format dismatch
                </div>
            </div>
            <div class="box">
                <h3 class="body_2 suit_m color_white_2">Total Supply</h3>
                <input type="text" placeholder="" aria-label="Total supply" />
                <div class="invalid">
                    <img src="~/images/icons/attention.svg" alt="Enter the total supply" />
                    Enter the total supply
                </div>
            </div>
        </div>
        <div class="checkbox_wrap">
            <h3 class="body_2 suit_m color_white_2">Function Selection</h3>
            <div class="box">
                <ul>
                    <li>
                        <p class="title table_1 suit_r color_white_2">General Lock</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check1" />
                            <label for="check1" class="text table_1 suit_l">
                                Instantly lock the movement of tokens from that address
                                <span class="color_white_2">&#8251; Reliability of the contract may be lowered when no general lock function is set.</span>
                            </label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Time Lock</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check2" />
                            <label for="check2" class="text table_1 suit_l">The lock is released at the specified date and time</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Vesting Lock</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check3" />
                            <label for="check3" class="text table_1 suit_l">Starting from a set date and time, the lock is released by dividing it into specific cycles and times</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Pause</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check4" />
                            <label for="check4" class="text table_1 suit_l">Suspend the transaction by temporarily stopping the smart contract (including release function)</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Burn</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check5" />
                            <label for="check5" class="text table_1 suit_l">Burn a specific amount of tokens</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Add Locker</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check6" />
                            <label for="check6" class="text table_1 suit_l">Specify or add the address that can lock/unlock specific address</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Add Burner</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check7" />
                            <label for="check7" class="text table_1 suit_l">Specify or add the address that can burn tokens</label>
                        </div>
                    </li>
                    <li>
                        <p class="title table_1 suit_r color_white_2">Transfer<br /> Ownership</p>
                        <div class="text_wrap">
                            <input type="checkbox" id="check8" />
                            <label for="check8" class="text table_1 suit_l">Change owner of the smartcontract to another address.</label>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div class="info_text_wrap">
            <h3 class="body_2 suit_m color_white_2">Owner wallet address</h3>
            <div class="text_box body_2 suit_r color_white_2">
                This is the wallet address of the administrator of smart contracts such as lock-up, unlock, and incineration. If you want to designate the owner's wallet with a wallet address different from the payment wallet address, you must change it to the corresponding wallet address through Metamask or Kai Cass after payment and before token issuance.
            </div>
        </div>
        <div class="button_wrap">
            <button type="button" class="button_160 payment_btn" disabled>ISSUING TOKENS</button>
        </div>
    </div>
</section>

<select hidden>
    <option value="Ethereum">Ethereum</option>
    <option value="Polygon">Polygon</option>
    <option value="BSC">BSC</option>
    <option value="Klaytn">Klaytn</option>
</select>
<select hidden>
    <option>ERC-20</option>
</select>

<script>
    const chainSelectBtn = document.getElementById('selectChain');
    const tokenSelectBtn = document.getElementById('selectToken');


    chainSelectBtn.addEventListener('click', (e) => {
        e.preventDefault();
        openMenu(e);

    });
    tokenSelectBtn.addEventListener('click', (e) => {
        e.preventDefault();
        openMenu(e);
    });

    const removeClassSelectList = () => {
        document.querySelectorAll('.select_list > ul').forEach(ev => {
            ev.classList.remove('on');
        })
    }

    // select 열기
    const openMenu = (event) => {
        const target = event.currentTarget;
        const nextElement = target.parentElement.nextElementSibling;

        removeClassSelectList();

        nextElement.classList.add('on');
    }

    // select 닫기
    document.body.addEventListener('click', (e) => {
        const target = e.target
        const isSelect = target.classList.contains('select_list') || target.closest('.select_list');

        if (isSelect) return;
        removeClassSelectList();
    })

    document.querySelectorAll('.chain_list li button').forEach(ev => {
        ev.addEventListener('click', (e) => {
            removeClassSelectList();
            chainSelectBtn.parentElement.classList.add('on');
            chainSelectBtn.querySelector('img').src = ev.children[0].src;
            chainSelectBtn.querySelector('.select').textContent = ev.children[1].textContent;
        })
    })

    document.querySelectorAll('.token_list li button').forEach(ev => {
        ev.addEventListener('click', (e) => {
            removeClassSelectList();
            tokenSelectBtn.parentElement.classList.add('on');
            tokenSelectBtn.querySelector('.select').textContent = ev.children[0].textContent;
        })
    })


                                // 체크박스
                                //const checkBtn = document.querySelectorAll('input[type=checkbox]');
                                //const paymentBtn = document.querySelector('.payment_btn');

                                //const updateCheck = () => {
                                //    let checkCount = 0;
                                //    for (let check of checkBtn) {
                                //        if (check.checked) {
                                //            checkCount++
                                //        }
                                //        console.log(checkCount)
                                //    }
                                //    if(checkCount === checkBtn.length){
                                //        paymentBtn.disabled = false;
                                //    }else{
                                //        paymentBtn.disabled = true;
                                //    }
                                //}

                                //for (let check of checkBtn) {
                                //    check.addEventListener('click', updateCheck)
                                //}

</script>


@section Modals{
    <!-- on 추가시 display -->
    <div class="modal connection">
        <!--data-modal-close 모달 닫기 -->
        <button type="button" class="modal_x_btn" data-modal-close>
            <span class="line"></span>
            <span class="line"></span>
        </button>
        <div class="inner">
            <h4 class="h4 jost_m color_theme">Wallet Connection</h4>
            <p class="sub_title body_2 suit_m">
                Select a wallet that corresponds to the blockchain network you want to use when issuing tokens.
            </p>
            <ul>
                <li>
                    <button type="button">
                        <img src="~/images/icons/metamask.png" alt="metamask" />
                        <span>Connect Metamask</span>
                    </button>
                </li>
                <li>
                    <button type="button">
                        <img src="~/images/icons/kaikas.png" alt="kaikas" />
                        <span>Connect KaiKas</span>
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <div class="modal issuing">
        <!--data-modal-close 모달 닫기 -->
        <div class="inner">
            <h4 class="h4 jost_m color_theme">ISSUING</h4>
            <p class="sub_title body_2 suit_m">
                The currently connected wallet address is <br />
                <strong class="color_theme">0x7dE7bAa83766D413D7fE382e14c72178CC5695a3</strong><br />
                If you want to designate this address as the owner's wallet, click 'Issue', and if you want to designate the owner's wallet with another wallet address, close the screen and connect the wallet.
            </p>
            <ul>
                <li>
                    <button type="button" class="button_140">ISSUE</button>
                </li>
                <li>
                    <button type="button" class="button_140" data-modal-close>CLOSE</button>
                </li>
            </ul>
        </div>
    </div>
}
@section Heads{
    <link rel="stylesheet" href="~/css/pages/Issuing.css" />
}

@section Scripts{

}