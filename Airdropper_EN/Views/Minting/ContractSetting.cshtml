@{
    ViewData["title"] = "스마트 컨트랙트 설정";
}

<div class="top_title_wrap">
    <div class="inner">
        <h2>Minting Setting</h2>
        <p class="sub_title">NFT MINTER는 ‘Chrome’ 웹브라우저에 최적화 되어있으며, 모바일 서비스가 일부 제한됩니다.</p>
        <p class="sub_title">‘저장 후 다음으로’ 버튼을 눌러 모든 설정사항을 저장할 수 있으며, 재로그인 및 컬렉션 재설정시 마지막으로 설정한 페이지로 돌아갑니다.</p>
    </div>
</div>

<section class="cont1 contract_setting">
    <div class="inner">
        <div class="contract_wrap wrapping">
            <h2>스마트 컨트랙트 설정</h2>
            <div class="collection_wrap box">
                <h3>컬렉션 설정</h3>
                <div class="button_wrap">
                    <ul>
                        <!-- on추가시 스타일 활성 -->
                        <li class="on">
                            <button type="button">컬렉션 불러오기</button>
                        </li>
                        <li>
                            <button type="button">컬렉션 생성하기</button>
                        </li>
                    </ul>
                </div>
                <div class="tab_content on loading_wrap">
                    <p class="info_text">* NFT MINTER가 제공하는 제너레이터를 통해 생성 및 저장된 모든 컬렉션을 선택할 수 있습니다.</p>
                    <select>
                        <option value="none" disabled selected>컬렉션을 선택해주세요.</option>
                        <option value="">Conmink1</option>
                        <option value="">Conmink2</option>
                        <option value="">Conmink3</option>
                    </select>
                </div>
                <div class="tab_content create_wrap">
                    <p class="info_text">외부 이미지를 민팅하는 경우 새로운 컬렉션을 생성한 후 진행해주세요.</p>
                    <div class="input_wrap">
                        <input type="text" placeholder="컬렉션 이름을 입력하세요." />
                        <button type="button" class="create_btn">생성하기</button>
                    </div>
                </div>
            </div>
            <div class="network_wrap box">
                <h3>블록체인 네트워크</h3>
                <div class="button_wrap">
                    <button type="button" class="on" data-btn-depth="0">
                        <img src="~/images/icons/ethereum.svg" alt="이더리움" />
                        <span>
                            Ethereum
                        </span>
                    </button>
                    <button type="button" data-btn-depth="0">
                        <img src="~/images/icons/klaytn.svg" alt="클레이튼" />
                        <span>
                            Klaytn
                        </span>
                    </button>
                </div>
            </div>
            <div class="protocol_wrap box">
                <h3>프로토콜</h3>
                <div class="button_wrap">
                    <button type="button" class="on" data-btn-depth="1">ERC-721</button>
                    <button type="button" data-btn-depth="1">ERC-1155</button>
                </div>
            </div>
            <div class="contract_name_wrap box">
                <h3>스마트 컨트랙트명</h3>
                <input type="text" placeholder="공란 및 특수문자 없이 영문 10자 이내 (예: Conmink)" />
            </div>
        </div>
        <div class="metadata_wrap wrapping">
            <h2>메타데이터 설정</h2>
            <div class="token_name_wrap box">
                <h3>토큰명</h3>
                <input type="text" placeholder="영문 10자 이내 (예: CONMINK)" />
                <p class="info_text">컬렉션명과 다른 이름으로 NFT 이름을 정하고자 하는 경우 입력해주세요.</p>
                <p class="info_text">* 마켓플레이스에서 보여지는 NFT 이름은 <strong>‘토큰명 + #파일명(숫자)’</strong>로 구성됩니다. (예: Conmink #1122)</p>
            </div>
            <div class="symbol_wrap box">
                <h3>토큰 심볼</h3>
                <input type="text" placeholder="영문 6자 이내로 입력해주세요." />
            </div>
            <div class="token_explain_wrap box">
                <h3>토큰 상세설명</h3>
                <textarea placeholder="컬렉션에 대한 자세한 설명을 적어주세요."></textarea>
            </div>
            <div class="url_wrap box">
                <h3>관련 사이트 URL</h3>
                <input type="text" placeholder="컬렉션과 관련된 사이트의 URL을 입력해주세요." />
            </div>
        </div>
        <div class="image_view_wrap wrapping">
            <h2>이미지 미리보기</h2>
            <!-- on 추가시 탭에 따라 display -->
            <div class="view_img_wrap view_content on">
                <h3>등록된 이미지</h3>
                <div class="view_wrap">
                    <!-- on 추가시 display -->
                    <div class="view_image">
                        <!-- on 추가시 display -->
                        <p class="error_msg on">등록된 이미지가 없습니다.</p>
                        <!-- on 추가시 display -->
                        <ul>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                                <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <!-- on 추가시 탭에 따라 display -->
            <div class="upload_wrap view_content">
                <h3>이미지 업로드</h3>
                <div class="text_wrap">
                    <p class="info_text">* 이미지는 본인이 직접 제작하였거나 저작권을 확보한 이미지를 사용해야 합니다.</p>
                    <p class="info_text">* 저작권 보호법 위반시 민형사상 책임은 본인에게 있습니다.</p>
                    <p class="info_text">* PNG, JPG, GIF, MP4 파일만 지원됩니다.</p>
                    <p class="info_text"><strong>* 이미지 파일명은 반드시 숫자로만 이루어져야합니다.</strong></p>
                </div>
                <input type="file" class="upload" id="upload" accept=".png, .jpg, .jpeg, .mp4" webkitdirectory mozdirectory msdirectory odirectory directory multiple />
                <!-- drag 클래스 추가시 border / on 클래스 추가시 업로드 완료-->
                <label for="upload">
                    <span>
                        레이어 폴더 및 파츠 이미지 파일들이<br />
                        포함된 마더 폴더를 드래그 하거나 업로드 해주세요.
                    </span>
                </label>
                <div class="view_wrap upload_img_view">
                    <h3>등록된 이미지</h3>
                    <div class="view_image">
                        <!-- on 추가시 display -->
                        <p class="error_msg on">컬렉션 폴더를 업로드하세요.</p>
                        <ul class="on">
                            @*<li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>
                            <li>
                            <img src="~/images/sample/generator/sample_collection1.jpg" />
                            </li>*@
                        </ul>
                    </div>
                </div>
            </div>

        </div>
        <button type="button" class="save_btn" onclick="location.href='/Minting/PublishNFT'">저장 후 다음으로</button>
    </div>
</section>


<script>
    // select 색상 바꾸기
    const select = document.querySelector('select');

    select.addEventListener('change', () => {
        if (select.selectedIndex !== 0) {
            select.style.color = "#222"
        }
    })

</script>

<script>
    const tabBtn = document.querySelectorAll('.collection_wrap .button_wrap li');
    const tabContents = document.querySelectorAll('.tab_content');
    const viewContent = document.querySelectorAll('.view_content');

    tabBtn.forEach((tabs, idx) => {
        tabs.addEventListener('click', () => {
            tabBtn.forEach(allTab => {
                allTab.classList.remove('on');
            });

            tabContents.forEach(content => {
                content.classList.remove('on');
            });

            viewContent.forEach(content => {
                content.classList.remove('on');
            });

            tabBtn[idx].classList.add('on');
            tabContents[idx].classList.add('on');
            viewContent[idx].classList.add('on');
        })
    })



    const chainBtn = document.querySelectorAll('[data-btn-depth="0"]');
    const protoBtn = document.querySelectorAll('[data-btn-depth="1"]');

    chainBtn.forEach(ev => {
        ev.addEventListener('click', (e) => {

            chainBtn.forEach(remove => {
                remove.classList.remove('on');
            });

            e.currentTarget.classList.add('on');
        })
    });

    protoBtn.forEach(ev => {
        ev.addEventListener('click', (e) => {

            protoBtn.forEach(remove => {
                remove.classList.remove('on');
            });

            e.currentTarget.classList.add('on');
        })
    });


    /* 파일 업로드 영역 */

    const upload = document.getElementById('upload');
    const label = document.querySelector('label[for="upload"]');
    const labelText = document.querySelector('label[for="upload"] span');
    const errorMsg = document.querySelector('.upload_img_view .error_msg');

    upload.addEventListener('change', () => {
        const viewWrap = document.querySelector('.upload_img_view ul');
        const fileLength = upload.files;
        const uploadFiles = [];


        for (let file of upload.files) {

            let fileType = file.type;

            if (fileType !== "image/png" && fileType !== "image/jpeg" && fileType !== "image/jpg") {
                Swal.fire(
                    '다시 시도해 주십시오.',
                    '이미지형식이 아닌 파일이 포함되어있습니다.!',
                    'error'
                )

                upload.value = "";
                labelText.style.color = "#E57373";
                label.classList.remove('on');
                label.classList.add('error');
                labelText.textContent = "파일 업로드에 실패하였습니다.";
                viewWrap.innerHTML = "";
                errorMsg.classList.add('on')

                return;

            } else {
                labelText.style.color = "#1273EB";
                label.classList.add('on');
                label.classList.remove('error');
                labelText.textContent = "파일 첨부 완료";
            }
        }

        if (fileLength.length < 1) {
            upload.value = "";
            labelText.style.color = "#E57373";
            label.classList.remove('on');
            label.classList.add('error');
            labelText.textContent = "파일 업로드를 취소하였습니다.";
            errorMsg.classList.add('on')
            viewWrap.innerHTML = "";
            return;

        } else {
            errorMsg.classList.remove('on');
            let files = [...fileLength]
            files.forEach(file => {

                uploadFiles.push(file);
                const reader = new FileReader();
                reader.onload = (e) => {
                    const preview = createElement(e, file);
                    viewWrap.appendChild(preview)
                }
                reader.readAsDataURL(file);
            })
        }
        //console.log(uploadFiles)

    })

    const createElement = (e, file) => {
        const fragment = document.createDocumentFragment();
        const li = document.createElement('li');
        const img = document.createElement('img');
        img.setAttribute('src', e.target.result);
        img.setAttribute('data-file', file.name);
        li.appendChild(img);
        fragment.appendChild(li)
        return fragment;
    }


</script>

@section Heads{
    <link rel="stylesheet" href="~/css/ChangeHeader.css" />
    <link rel="stylesheet" href="~/css/MintingCommon.css" />
    <link rel="stylesheet" href="~/css/ContractSetting.css" />
}