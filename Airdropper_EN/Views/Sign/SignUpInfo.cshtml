@{
    ViewData["title"] = "SIGN UP";
}

<div class="top_title_wrap">
    <div class="inner">
        <h2 class="subtitle_1 suit_m">SIGN UP</h2>
        <p class="sub_title body_2 suit_r color_white_2">AIR DROPPER is optimized for ‘Chrome’ web browser and does not support mobile service.</p>
    </div>
</div>

<section class="cont sign_up_info">
    <div class="inner">
        <h2 class="subtitle_1 suit_m">Identity verification and Information input</h2>
        <div class="form_wrap">
            <form>
                <div class="input_wrap id">
                    <label for="userId" class="body_2 color_white_2 suit_m">ID</label>
                    <div class="box">
                        <input type="email" id="userId" placeholder="Email address" />
                        <button type="button" class="button_112" id="check_email_btn" data-type="email">Duplicate check</button>
                    </div>
                    <p class="success_msg caption_2 color_theme">Available ID</p>
                    <p class="error_msg caption_2 color_alert">This ID is already in use.</p>
                </div>
                <div class="input_wrap certification">
                    <label for="certification" class="body_2 color_white_2 suit_m">E-mail verification</label>
                    <div class="box">
                        <input type="text" placeholder="Email verification code" />
                        <button type="button" class="button_112">Send code</button>
                    </div>
                    <div class="box">
                        <button type="button" class="button_140" data-type="email_auth">Check code</button>
                    </div>
                    <p class="success_msg caption_2 color_theme">E-mail verification is completed.</p>
                    <p class="error_msg caption_2 color_alert">Please enter your verification code.</p>
                    <p class="error_msg caption_2 color_alert">The verification code does not match.</p>
                </div>
                <div class="input_wrap pw">
                    <label for="pw" class="body_2 color_white_2 suit_m">Password settings</label>
                    <div class="pos_box">
                        <input type="password" id="pw" placeholder="8~16 digit combination of English, numbers and special characters" />
                        <button type="button" class="view_btn" data-eye>
                            <img src="~/images/icons/eye_close.svg" class="close" alt="hidden password" />
                            <img src="~/images/icons/eye_open.svg" class="open" alt="view password" />
                        </button>

                    </div>
                    <div class="pos_box">
                        <input type="password" id="rePw" placeholder="Re-enter password" />
                        <button type="button" class="view_btn" data-eye>
                            <img src="~/images/icons/eye_close.svg" class="close" alt="hidden password" />
                            <img src="~/images/icons/eye_open.svg" class="open" alt="view password" />
                        </button>
                    </div>
                    <p class="error_msg caption_2 color_alert">The password format is incorrect.</p>
                </div>
                <div class="input_wrap nickname">
                    <label for="nickName" class="body_2 color_white_2 suit_m">Nickname</label>
                    <div class="box">
                        <input type="text" id="nickName" />
                        <button type="button" class="button_112" id="check_nickname_btn" data-type="nickname">Duplicate check</button>
                    </div>
                    <p class="success_msg caption_2 color_theme">Available nickname.</p>
                    <p class="error_msg caption_2 color_alert">Please enter your nickname.</p>
                    <p class="error_msg caption_2 color_alert">This nickname is already using.</p>
                </div>
            </form>
        </div>
        <button type="button" class="button_160">Complete Signup</button>
    </div>
</section>


@section Heads{
    <link rel="stylesheet" href="~/css/pages/SignUpInfo.css" />
}

    @section Scripts{
    <script>
        /**
         * 중복 혹은 인증번호 확인 버튼 클릭 이벤트
         */
        document.querySelectorAll(".check_btn").forEach(el => {
            el.addEventListener("click", e => {
                let wrapEl = e.target.parentElement.parentElement;
                ClickValidBtn(e.target.dataset.type, wrapEl);
            });
        })

/*        document.querySelector(".send_btn").addEventListener("click", () => {
            let email = document.getElementById("userId").value;
            SendEmailAuth(email);
        });
        */

        document.getElementById("pw").addEventListener("change", e => {
            let wrapEl = e.target.parentElement.parentElement;
            let input = e.target.value;
            
            CheckValidPass(input, wrapEl);
        });

        /**
         * 중복 혹은 인증번호 확인 버튼 클릭시 실행
         */
        const ClickValidBtn = (valueType, wrapEl) => {
            LoadingScreen();
            let input = wrapEl.querySelector("input").value;

            let ReqParam = ValidateReqParamByValueTYpe(valueType, input);

            if (!input) {
                console.log(ReqParam.emptyValueMsg);
                wrapEl.querySelector("input").classList.add("error");
                wrapEl.querySelector(".error_msg").classList.add("on");
                wrapEl.querySelector(".error_msg").textContent = ReqParam.emptyValueMsg;
                UnLoadingScreen();
                return;
            }

            CheckValid(ReqParam.method, ReqParam.data, wrapEl)
        };

        const CheckValidPass = (pass, wrapEl) => {
            let passRegex = new RegExp("^(?=.*[a-zA-Z])(?=.*[!@@#$%^*+=-])(?=.*[0-9]).{8,16}$");

            let result = passRegex.exec(pass);

            console.log(result);

            if (result) {

            } else {
                document.getElementById("pw").classList.add("error");
                wrapEl.querySelector(".error_msg").classList.add("on");
                wrapEl.querySelector(".error_msg").textContent = "The password format is incorrect.";
            }

        }

        /**
         * 타입별 유효성 검사에 필요한 정보 가져오기
         * 빈 값 에러메시지, 요청 함수, 요청 파라미터를 가져옴
         */
        const ValidateReqParamByValueTYpe = (valueType, input) => {
            let result = {};
            switch (valueType) {
                case "email": {
                    result.emptyValueMsg = "Please enter your email address.";
                    result.method = "CheckValidEmail";
                    result.data = { email: input }
                    break;
                }
                case "nickname": {
                    result.emptyValueMsg = "Please enter a nickname to use.";
                    result.method = "CheckValidNickname";
                    result.data = { nickname: input }
                    break;
                }
                case "email_auth": {
                    result.emptyValueMsg = "Please enter your verification code.";
                    result.method = "CheckValidEmailAuth";
                    result.data = {
                        emailAuth: input,
                        email: document.getElementById("userId").value
                    }
                    break;
                }
            }
            return result;
        }

        /**
         * 유효성 성공/실패시 변하는 스타일 초기화
         */
        const ClearValidResult = (wrapEl) => {
            wrapEl.querySelector("input").classList.remove("error");
            wrapEl.querySelector(".error_msg").classList.remove("on");
            wrapEl.querySelector(".success_msg").classList.remove("on");
        }

        /**
         * 유효성 검사 요청 함수
         */
        const CheckValid = (method, data, wrapEl) => {
            $.ajax({
                url: `/Sign/${method}`,
                type: 'Post',
                data: data,
                success: function (data, textStatus, jQxhr) {
                    UnLoadingScreen();
                    ClearValidResult(wrapEl);
                    console.log(data);
                    if (data.result) {
                        wrapEl.querySelector(".success_msg").classList.add("on");
                        wrapEl.querySelector(".success_msg").textContent = data.sData;
                    } else {
                        wrapEl.querySelector("input").classList.add("error");
                        wrapEl.querySelector(".error_msg").classList.add("on");
                        wrapEl.querySelector(".error_msg").textContent = data.sData;
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    swal("Error", 'Data Exception', 'error');
                }
            })
        };

        const SendEmailAuth = (email) => {
            $.ajax({
                url: "/Sign/SendEmailAuth",
                type: 'Post',
                data: {
                    email: email
                },
                success: function (data, textStatus, jQxhr) {
                    console.log(data);
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    swal("Error", 'Data Exception', 'error');
                }
            })
        };
    </script>
}